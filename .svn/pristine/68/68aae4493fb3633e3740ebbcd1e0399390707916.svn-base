package com.mdm;

import java.io.ByteArrayOutputStream;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;

import org.json.JSONException;
import org.json.JSONObject;
import org.json.JSONStringer;
import org.json.JSONTokener;
import org.json.simple.JSONArray;
import org.json.simple.parser.JSONParser;

import com.mdm.models.PInfo;

import android.annotation.TargetApi;
import android.app.Activity;
import android.app.Notification;
import android.app.NotificationManager;
import android.app.PendingIntent;
import android.app.admin.DevicePolicyManager;
import android.content.ComponentName;
import android.content.Context;
import android.content.Intent;
import android.graphics.Bitmap;
import android.graphics.drawable.BitmapDrawable;
import android.graphics.drawable.Drawable;
import android.net.wifi.ScanResult;
import android.net.wifi.WifiConfiguration;
import android.net.wifi.WifiManager;
import android.os.Build;
import android.os.Bundle;
import android.util.Base64;
import android.util.Log;
import android.widget.Toast;

public class Operation{
	
	Context context = null;
	DevicePolicyManager devicePolicyManager;
	ApplicationManager appList;
	DeviceInfo deviceInfo;
	String code = null;
	String token = null;
	String data = "";
	int mode = 1;
	private static final String TAG = "Operation Handler";
	static final int ACTIVATION_REQUEST = 47; 
	Intent intent;
	Map<String, String> params = new HashMap<String, String>();
	
	
	public Operation(Context context, int mode, Intent intent){
		this.context = context;
		this.intent = intent;
		this.mode = mode;
		code = intent.getStringExtra("message").trim();
        Log.v("Code",  code );
        
        token = intent.getStringExtra("token").trim();
        Log.v("Token",  token );
        
        if(intent.getStringExtra("data") != null){
        	data = intent.getStringExtra("data");
        }
        doTask();
        
	}
	
	public Operation(Context context, int mode, Map<String, String> params){
		this.context = context;
		this.mode = mode;
		this.params = params;
		
		if(params.get("code") != null){
			code = params.get("code");
			Log.v("PRINTING CODE : ", code);
		}
		
		if(params.get("data") != null){
			data = params.get("data");
		}
		doTask();
		
	}
	
	@SuppressWarnings("static-access")
	@TargetApi(Build.VERSION_CODES.ICE_CREAM_SANDWICH)
	public void doTask(){
		
        String notification = "";
        String ssid = "";
        String password = "";        
        
        devicePolicyManager = (DevicePolicyManager) context.getSystemService(Context.DEVICE_POLICY_SERVICE);
        appList = new ApplicationManager(context);
		deviceInfo = new DeviceInfo(context);
		
		if(code.equals(CommonUtilities.OPERATION_DEVICE_INFO)){
        	
        	PhoneState phoneState = new PhoneState(context);
        	Battery battery = phoneState.getBattery();
            JSONObject obj=new JSONObject();
      	  	try {
				obj.put("ip",phoneState.getIpAddress());
	      	  	obj.put("battery_scale",battery.getScale()+"");
	      	  	obj.put("battery_level",battery.getLevel()+"");
	      	  	obj.put("battery_voltage",battery.getVoltage()+"");
	      	  	obj.put("battery_temp", battery.getTemp()+"");
	      	  	obj.put("internal_memory_total", deviceInfo.getTotalInternalMemorySize());
	      	    obj.put("internal_memory_available", deviceInfo.getAvailableInternalMemorySize());
	      	    obj.put("external_memory_total", deviceInfo.getTotalExternalMemorySize());
	      	    obj.put("external_memory_available", deviceInfo.getAvailableExternalMemorySize());
	      	  
	      	  	//obj.put("avail_mem", phoneState.getAvailableMemory());
			} catch (JSONException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
      	    Map<String, String> params = new HashMap<String, String>();
            params.put("code", code);
            params.put("msgID", token);
            params.put("status", "200");
            params.put("data",obj.toString());
            
            if(mode == CommonUtilities.MESSAGE_MODE_GCM){
            	ServerUtilities.pushData(params, context);
            }
            
        }else if(code.equals(CommonUtilities.OPERATION_DEVICE_LOCATION)){
        	
        	LocationServices ls = new LocationServices(context);
        	Log.v("Latitude",ls.getLatitude());
        	 JSONObject obj=new JSONObject();
       	  	try {
 				obj.put("latitude",ls.getLatitude());
 	      	  	obj.put("longitude",ls.getLongitude());
 	      	  	
 			} catch (JSONException e1) {
 				// TODO Auto-generated catch block
 				e1.printStackTrace();
 			}
       	  	Map<String, String> params = new HashMap<String, String>();
            params.put("code",CommonUtilities.OPERATION_DEVICE_LOCATION);
            params.put("msgID",token);
            params.put("status", "200");
            params.put("data",obj.toString());
            if(mode == CommonUtilities.MESSAGE_MODE_GCM){
            	ServerUtilities.pushData(params, context); 
            }
            
        }else if(code.equals(CommonUtilities.OPERATION_GET_APPLICATION_LIST)){
        	ArrayList<PInfo> apps = appList.getInstalledApps(false); /* false = no system packages */
        	//String apps[] = appList.getApplicationListasArray();
        	JSONArray jsonArray = new JSONArray();
        	final int max = apps.size();
    	    for (int i=0; i<max; i++) {
    	    	JSONObject jsonObj= new JSONObject();
    	        try {
					jsonObj.put("name", apps.get(i).appname);
					jsonObj.put("package", apps.get(i).pname);
					jsonObj.put("icon", apps.get(i).icon);
				} catch (JSONException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
    	        jsonArray.add(jsonObj);
    	    }
        	/*for(int i=0;i<apps.length;i++){
        		jsonArray.add(apps[i]);
        	}*/
        	JSONObject appsObj = new JSONObject();
        	try {
				appsObj.put("apps", jsonArray);
			} catch (JSONException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
        	
            Map<String, String> params = new HashMap<String, String>();
                
            params.put("code",CommonUtilities.OPERATION_GET_APPLICATION_LIST);
            params.put("msgID", token);  
            params.put("status", "200");
            params.put("data",jsonArray.toString());
            if(mode == CommonUtilities.MESSAGE_MODE_GCM){
            	ServerUtilities.pushData(params, context); 
            }
            
        }else if(code.equals(CommonUtilities.OPERATION_LOCK_DEVICE)){
        	
        	//Toast.makeText(this, "Locking device...", Toast.LENGTH_LONG).show();
			Log.d(TAG, "Locking device now");
			Map<String, String> params = new HashMap<String, String>();
            params.put("code", code);
            params.put("msgID", token);
            params.put("status", "200");
            if(mode == CommonUtilities.MESSAGE_MODE_GCM){
            	ServerUtilities.pushData(params, context);
            }
            devicePolicyManager.lockNow();
			
        }else if(code.equals(CommonUtilities.OPERATION_WIPE_DATA)){

        	//Toast.makeText(this, "Locking device...", Toast.LENGTH_LONG).show();
        	Log.d(TAG,"RESETing device now - all user data will be ERASED to factory settings");
        	Map<String, String> params = new HashMap<String, String>();
            params.put("code", code);
            params.put("msgID", token);
            params.put("status", "200");
            if(mode == CommonUtilities.MESSAGE_MODE_GCM){
            	ServerUtilities.pushData(params, context);
            }
            devicePolicyManager.wipeData(ACTIVATION_REQUEST);
        	
        }else if(code.equals(CommonUtilities.OPERATION_CHANGE_LOCK_CODE)){
        	ComponentName demoDeviceAdmin = new ComponentName(context, DemoDeviceAdminReceiver.class);
        	devicePolicyManager.setPasswordMinimumLength(demoDeviceAdmin, 7);
        	String pass = "123";
        	//data = intent.getStringExtra("data");
        	JSONParser jp = new JSONParser();
        	try {
				JSONObject jobj = new JSONObject(data);
				pass = (String)jobj.get("password");
			} catch (Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
        	Map<String, String> params = new HashMap<String, String>();
            params.put("code", code);
            params.put("msgID", token);
            params.put("status", "200");
            if(mode == CommonUtilities.MESSAGE_MODE_GCM){
            	ServerUtilities.pushData(params, context);
            }
            devicePolicyManager.resetPassword(pass, DevicePolicyManager.RESET_PASSWORD_REQUIRE_ENTRY);
        	
        }else if(code.equals(CommonUtilities.OPERATION_NOTIFICATION)){
        	
        	JSONParser jp = new JSONParser();
        	try {
				JSONObject jobj = (JSONObject)jp.parse(data);
				notification = (String)jobj.get("notification");
			} catch (Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
        	Log.v("Notification",notification);
        	Map<String, String> params = new HashMap<String, String>();
            params.put("code", code);
            params.put("msgID", token);
            params.put("status", "200");
            if(mode == CommonUtilities.MESSAGE_MODE_GCM){
            	ServerUtilities.pushData(params, context);
            }
            generateNotification(context,notification);
        	
        }else if(code.equals(CommonUtilities.OPERATION_WIFI)){
        	
        	//data = intent.getStringExtra("data");
        	JSONParser jp = new JSONParser();
        	try {
				JSONObject jobj = new JSONObject(data);
				ssid = (String)jobj.get("ssid");
				password = (String)jobj.get("password");
			} catch (Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
        	Map<String, String> params = new HashMap<String, String>();
            params.put("code", code);
            params.put("msgID", token);
            params.put("status", "200");
            if(mode == CommonUtilities.MESSAGE_MODE_GCM){
            	ServerUtilities.pushData(params, context);
            }
            setWifi(ssid,password);
        	
        }else if(code.equals(CommonUtilities.OPERATION_DISABLE_CAMERA)){
        	
        	boolean camFunc = true;
        	//data = intent.getStringExtra("data");
        	JSONParser jp = new JSONParser();
        	try {
				JSONObject jobj = new JSONObject(data);
				camFunc = (Boolean)jobj.get("function");
			} catch (Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
        	ComponentName cameraAdmin = new ComponentName(context, DemoDeviceAdminReceiver.class);
        	Map<String, String> params = new HashMap<String, String>();
            params.put("code", code);
            params.put("msgID", token);
            params.put("status", "200");
            if(mode == CommonUtilities.MESSAGE_MODE_GCM){
            	ServerUtilities.pushData(params, context);
            }
            devicePolicyManager.setCameraDisabled(cameraAdmin, camFunc);
        	
        }else if(code.equals(CommonUtilities.OPERATION_INSTALL_APPLICATION)){
        	
        	String appUrl = "";
        	//data = intent.getStringExtra("data");
        	JSONParser jp = new JSONParser();
        	try {
				JSONObject jobj = new JSONObject(data);
				appUrl = (String)jobj.get("url");
			} catch (Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
        	Log.v("App URL : ",appUrl);
        	Map<String, String> params = new HashMap<String, String>();
            params.put("code", code);
            params.put("msgID", token);
            params.put("status", "200");
            if(mode == CommonUtilities.MESSAGE_MODE_GCM){
            	ServerUtilities.pushData(params, context);
            }
            appList.installApp(appUrl);
        	
        }else if(code.equals(CommonUtilities.OPERATION_UNINSTALL_APPLICATION)){
        	
        	String packageName = "";
        	//data = intent.getStringExtra("data");
        	JSONParser jp = new JSONParser();
        	try {
				JSONObject jobj = new JSONObject(data);
				packageName = (String)jobj.get("package");
			} catch (Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
        	Log.v("Package Name : ",packageName);
        	Map<String, String> params = new HashMap<String, String>();
            params.put("code", code);
            params.put("msgID", token);
            params.put("status", "200");
            if(mode == CommonUtilities.MESSAGE_MODE_GCM){
            	ServerUtilities.pushData(params, context);
            }
            appList.unInstallApplication(packageName);
        	
        }else if(code.equals(CommonUtilities.OPERATION_ENCRYPT_STORAGE)){
        	boolean encryptFunc = true;
        	//data = intent.getStringExtra("data");
        	JSONParser jp = new JSONParser();
        	try {
				JSONObject jobj = new JSONObject(data);
				encryptFunc = (Boolean)jobj.get("function");
			} catch (Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
        	//ComponentName cameraAdmin = new ComponentName(this, DemoDeviceAdminReceiver.class);
        	ComponentName admin = new ComponentName(context, DemoDeviceAdminReceiver.class);
        	Map<String, String> params = new HashMap<String, String>();
            params.put("code", code);
            params.put("msgID", token);
            params.put("status", "200");
            if(mode == CommonUtilities.MESSAGE_MODE_GCM){
            	ServerUtilities.pushData(params, context);
            }
            if(encryptFunc && devicePolicyManager.getStorageEncryptionStatus() != devicePolicyManager.ENCRYPTION_STATUS_UNSUPPORTED){
            	if(devicePolicyManager.getStorageEncryptionStatus() == devicePolicyManager.ENCRYPTION_STATUS_INACTIVE){
            		devicePolicyManager.setStorageEncryption(admin, encryptFunc);
            	}
            }else if(!encryptFunc && devicePolicyManager.getStorageEncryptionStatus() != devicePolicyManager.ENCRYPTION_STATUS_UNSUPPORTED){
            	if(devicePolicyManager.getStorageEncryptionStatus() == devicePolicyManager.ENCRYPTION_STATUS_ACTIVE || devicePolicyManager.getStorageEncryptionStatus() == devicePolicyManager.ENCRYPTION_STATUS_ACTIVATING){
            		devicePolicyManager.setStorageEncryption(admin, encryptFunc);
            	}
            }
        }
	}
	
	public void  setWifi(String SSID, String password){
	       
	       
        WifiConfiguration wc=new WifiConfiguration();
       
        wc.SSID = "\"{SSID}\"".replace("{SSID}", SSID);
        wc.preSharedKey = "\"{PRESHAREDKEY}\"".replace("{PRESHAREDKEY}",password)  ;
   
        wc.status = WifiConfiguration.Status.ENABLED;
        wc.allowedGroupCiphers.set(WifiConfiguration.GroupCipher.TKIP);
        wc.allowedGroupCiphers.set(WifiConfiguration.GroupCipher.CCMP);
        wc.allowedKeyManagement.set(WifiConfiguration.KeyMgmt.WPA_PSK);
        wc.allowedPairwiseCiphers.set(WifiConfiguration.PairwiseCipher.TKIP);
        wc.allowedPairwiseCiphers.set(WifiConfiguration.PairwiseCipher.CCMP);
        wc.allowedProtocols.set(WifiConfiguration.Protocol.RSN);
        wc.allowedProtocols.set(WifiConfiguration.Protocol.WPA);

        WifiManager wifi = (WifiManager) context.getSystemService(Context.WIFI_SERVICE);
         
        int netId=wifi.addNetwork(wc);
        wifi.enableNetwork(netId, true);     
    }
	/**
    * Issues a notification to inform the user that server has sent a message.
    */
   private static void generateNotification(Context context, String message) {
       int icon = R.drawable.ic_stat_gcm;
       long when = System.currentTimeMillis();
       NotificationManager notificationManager = (NotificationManager)
               context.getSystemService(Context.NOTIFICATION_SERVICE);
       Notification notification = new Notification(icon, message, when);
       String title = context.getString(R.string.app_name);
       Intent notificationIntent = new Intent(context, NotifyActivity.class);
       notificationIntent.putExtra("notification", message);
       // set intent so it does not start a new activity
       notificationIntent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP |
               Intent.FLAG_ACTIVITY_SINGLE_TOP);
       PendingIntent intent =
               PendingIntent.getActivity(context, 0, notificationIntent, 0);
       notification.setLatestEventInfo(context, title, message, intent);
       notification.flags |= Notification.FLAG_AUTO_CANCEL;
       notificationManager.notify(0, notification);
   }
}
