package com.mdm;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.ArrayList;

import com.mdm.ExecShell;

import android.util.Log;
import android.widget.Toast;

/**
 * @author Kasun Dananjaya
 * 
 */
public class Root {

    private static String LOG_TAG = Root.class.getName();

    /**
	*Returns true if the device is rooted (if any of the root methods returns true)
	*/
    public boolean isDeviceRooted() {
    	if (checkRootMethod3()){return true;}
    	if (checkRootMethod2()){return true;}
        if (checkRootMethod1()){return true;}
        
        
        return false;
    }

    /**
	*Returns true if the OS build tags contains "test-keys"
	*/
    public boolean checkRootMethod1(){
        String buildTags = android.os.Build.TAGS;

        if (buildTags != null && buildTags.contains("test-keys")) {
        	Log.e("ROOT CHECKER", "ROOT METHOD 1");
            return true;
        }
        return false;
    }
    /**
	*Returns true if the device contains SuperUser.apk which is stored into the device in the rooting process
	*/
    public boolean checkRootMethod2(){
        try {
            File file = new File("/system/app/Superuser.apk");
            if (file.exists()) {
            	Log.e("ROOT CHECKER", "ROOT METHOD 2");
                return true;
                
            }
        } catch (Exception e) { }

        return false;
    }
    /**
	*Executes a shell command (superuser access with su binary) and returns true if the command succeeds
	*/
    public boolean checkRootMethod3() {
        if (new ExecShell().executeCommand(ExecShell.SHELL_CMD.check_su_binary) != null){
        	Log.e("ROOT CHECKER", "ROOT METHOD 3");
            return true;
        }else{
            return false;
        }
    }
}