
package com.mdm;

import static com.mdm.CommonUtilities.SERVER_URL;
import static com.mdm.CommonUtilities.TAG;
import com.google.android.gcm.GCMRegistrar;

import android.content.Context;
import android.util.Log;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Random;

import org.json.JSONException;
import org.json.JSONObject;

import android.os.* ;
/**
 * Helper class used to communicate with the demo server.
 */
public final class ServerUtilities {

    private static final int MAX_ATTEMPTS = 5;
    private static final int BACKOFF_MILLI_SECONDS = 2000;
    private static final Random random = new Random();
   static boolean isAuthenticate(String username,String password,Context context){
	   Map<String, String> params = new HashMap<String, String>();
       params.put("username",username);
       params.put("password",password);
	   String response = sendWithTimeWait("users", params, "POST", context);
	   if(response.trim().equals("authenticated")){
		   return true;
	   }else{
		   return false;
	   }
   }
   static boolean isRegistered(String regId,Context context){
	   Map<String, String> params = new HashMap<String, String>();
       params.put("regid",regId);
       String response = sendWithTimeWait("devices", params, "POST", context);
       try{
       Log.v("Register State", response);
       }catch(Exception e){
    	   e.printStackTrace();
       }
	   if(response.trim().equals("registered")){
		   return true;
	   }else{
		   return false;
	   }
   }
   static String register(String regId,Context context){
	   DeviceInfo deviceInfo = new DeviceInfo(context);
	   JSONObject jsObject = new JSONObject();
	   String osVersion = "";
	   try {
		osVersion = deviceInfo.getOsVersion();   
		jsObject.put("device", deviceInfo.getDevice());
		jsObject.put("device_id", deviceInfo.getDeviceId());
		jsObject.put("model",deviceInfo.getDeviceModel());
		jsObject.put("email", deviceInfo.getEmail());
		jsObject.put("opname", deviceInfo.getNetworkOperatorName());
		jsObject.put("sdkversion", deviceInfo.getSdkVersion());
	} catch (JSONException e) {
		// TODO Auto-generated catch block
		e.printStackTrace();
	}
	  
	   Map<String, String> params = new HashMap<String, String>();
       params.put("regid",regId);
       params.put("info",jsObject.toString());
       params.put("email",deviceInfo.getEmail());
       params.put("osversion", osVersion);
       String response = sendWithTimeWait("devices", params, "POST", context);
       return response;
   }
   static String unregister(String regId,Context context){
	   Map<String, String> params = new HashMap<String, String>();
       params.put("regid",regId);
       String response = sendWithTimeWait("devices", params, "POST", context);
       return response;
   }
   static String pushData(Map<String,String> params,Context context){
	   String response = sendWithTimeWait("notifications",params,"POST", context);
       return response;
   }

   static String sendWithTimeWait(String epPostFix,Map<String, String> params,String option,Context context) {
       
       
       
       long backoff = BACKOFF_MILLI_SECONDS + random.nextInt(1000);
       for (int i = 1; i <= MAX_ATTEMPTS; i++) {
           Log.d(TAG, "Attempt #" + i + " to register");
           try {
        	   String response = sendToServer(epPostFix, params,option,context);
               GCMRegistrar.setRegisteredOnServer(context, true);
               String message = context.getString(R.string.server_registered);
               Log.v("Check Reg Success",message.toString());
            //   displayMessage(context, message);
               return response;
           } catch (IOException e) {
               Log.e(TAG, "Failed to register on attempt " + i, e);
               if (i == MAX_ATTEMPTS) {
                   break;
               }
               try {
                   Log.d(TAG, "Sleeping for " + backoff + " ms before retry");
                   Thread.sleep(backoff);
               } catch (InterruptedException e1) {
                   // Activity finished before we complete - exit.
                   Log.d(TAG, "Thread interrupted: abort remaining retries!");
                   Thread.currentThread().interrupt();
                   return null;
               }
               // increase backoff exponentially
               backoff *= 2;
           }
       }
       String message = context.getString(R.string.server_register_error,
               MAX_ATTEMPTS);
      // CommonUtilities.displayMessage(context, message);
       return null;
   }

    static String sendToServer(String epPostFix, Map<String, String> params, String option,Context context)
            throws IOException {
    	String response = null;
    	String endpoint = CommonUtilities.SERVER_URL+epPostFix;
        URL url;
        try {
            url = new URL(endpoint);
        } catch (MalformedURLException e) {
            throw new IllegalArgumentException("invalid url: " + endpoint);
        }
        StringBuilder bodyBuilder = new StringBuilder();
        Iterator<Entry<String, String>> iterator = params.entrySet().iterator();
        // constructs the POST body using the parameters
        while (iterator.hasNext()) {
            Entry<String, String> param = iterator.next();
            bodyBuilder.append(param.getKey()).append('=')
                    .append(param.getValue());
            if (iterator.hasNext()) {
                bodyBuilder.append('&');
            }
        }
        String body = bodyBuilder.toString();
        Log.v(TAG, "Posting '" + body + "' to " + url);
        byte[] bytes = body.getBytes();
        HttpURLConnection conn = null;
        try {
            conn = (HttpURLConnection) url.openConnection();
            conn.setDoOutput(true);
            conn.setUseCaches(false);
            conn.setFixedLengthStreamingMode(bytes.length);
            conn.setRequestMethod(option);
            conn.setRequestProperty("Content-Type",
                    "application/x-www-form-urlencoded;charset=UTF-8");
            // post the request
            int status = 0;
            Log.v("Check verb",option);
            if(!option.equals("DELETE")){
            	OutputStream out = conn.getOutputStream();
	            out.write(bytes);
	            out.close();
	            // handle the response
	            status = conn.getResponseCode();
	            Log.v("Response Statussss",status+"");
	            InputStream inStream = conn.getInputStream();
	            response = inputStreamAsString(inStream);
	            Log.v("Response Messageeeee",response);
            }else{
            	status = 200;
            }
            if (status != 200) {
              throw new IOException("Post failed with error code " + status);
            }
        } finally {
            if (conn != null) {
                conn.disconnect();
            }
        }
        return response; 
      }
    static String inputStreamAsString(InputStream in){

        BufferedReader reader = new BufferedReader(new InputStreamReader(in));
        StringBuilder builder = new StringBuilder();
        String line = null;
        try {
            while ((line = reader.readLine()) != null) {
                builder.append(line);
                builder.append("\n"); //appende a new line
            }
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
      //  System.out.println(builder.toString());
        return builder.toString();
    }
   
}
